@page "/courses"
@using HighSchool.Permissions;
@using Volo.Abp.Application.Dtos
@using HighSchool.Courses
@using HighSchool.Localization
@using Microsoft.Extensions.Localization
@using Volo.Abp.AspNetCore.Components.Web;
@using Volo.Abp;
@inject IStringLocalizer<HighSchoolResource> L
@inject AbpBlazorMessageLocalizerHelper<HighSchoolResource> LH
@inherits AbpCrudPageBase<ICourseAppService, CourseDto, Guid, PagedAndSortedResultRequestDto, CreateUpdateCourseDto>

<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2>@L["Course"]</h2>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                <Button Color="Color.Primary"
                        Clicked="OpenCreateModalAsync">
                    @L["NewCourse"]
                </Button>
            </Column>
        </Row>
    </CardHeader>
    <CardBody>
        <DataGrid TItem="CourseDto"
                  Data="Entities"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  PageSize="PageSize">
            <DataGridColumns>
                <DataGridEntityActionsColumn TItem="CourseDto" @ref="@EntityActionsColumn">
                    <DisplayTemplate>
                        <EntityActions TItem="CourseDto" EntityActionsColumn="@EntityActionsColumn">
                            <EntityAction TItem="CourseDto"
                                          Text="@L["Edit"]"
                                          Clicked="() => OpenEditModalAsync(context)" />
                            <EntityAction TItem="CourseDto"
                                          Text="@L["Delete"]"
                                          Clicked="() => DeleteEntityAsync(context)"
                                          ConfirmationMessage="() => GetDeleteConfirmationMessage(context)" />
                        </EntityActions>

                    </DisplayTemplate>
                </DataGridEntityActionsColumn>

                <DataGridColumn TItem="CourseDto"
                                Field="@nameof(CourseDto.Name)"
                                Caption="@L["Name"]">
                            </DataGridColumn>
                <DataGridColumn TItem="CourseDto"
                                Field="@nameof(CourseDto.TeacherName)"
                                Caption="@L["Teacher"]"></DataGridColumn>

                <DataGridColumn TItem="CourseDto"
                                Field="@nameof(CourseDto.Type)"
                                Caption="@L["Type"]">

                    
                </DataGridColumn>

                <DataGridColumn TItem="CourseDto"
                                Field="@nameof(CourseDto.PublishDate)"
                                Caption="@L["PublishDate"]">
                    <DisplayTemplate>
                        @context.PublishDate.ToShortDateString()
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridColumn TItem="CourseDto"
                                Field="@nameof(CourseDto.Price)"
                                Caption="@L["Price"]">
                </DataGridColumn>

                <DataGridColumn TItem="CourseDto"
                                Field="@nameof(CourseDto.CreationTime)"
                                Caption="@L["CreationTime"]">
                    <DisplayTemplate>
                        @context.CreationTime.ToLongDateString()
                    </DisplayTemplate>
                </DataGridColumn>

            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>

<Modal @ref="@CreateModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@L["NewCourse"]</ModalTitle>
                <CloseButton Clicked="CloseCreateModalAsync"/>
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@CreateValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                    <Field>
                        <FieldLabel>@L["Teacher"]</FieldLabel>
                        <Select TValue="Guid" @bind-SelectedValue="@NewEntity.TeacherId">
                            @foreach (var teacher in teacherList)
                            {
                                <SelectItem TValue="Guid" Value="@teacher.Id">
                                    @teacher.Name
                                </SelectItem>
                            }
                        </Select>
                    </Field>
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Name"]</FieldLabel>
                            <TextEdit @bind-Text="@NewEntity.Name">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Field>
                        <FieldLabel>@L["Type"]</FieldLabel>
                        <Select TValue="CourseType" @bind-SelectedValue="@NewEntity.Type">
                            @foreach (int courseTypeValue in Enum.GetValues(typeof(CourseType)))
                            {
                                <SelectItem TValue="CourseType" Value="@((CourseType) courseTypeValue)">
                                     @L[$"Enum:CourseType.{courseTypeValue}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>
                    <Field>
                        <FieldLabel>@L["PublishDate"]</FieldLabel>
                        <DateEdit TValue="DateTime" @bind-Date="NewEntity.PublishDate"/>
                    </Field>
                    <Field>
                        <FieldLabel>@L["Price"]</FieldLabel>
                        <NumericEdit TValue="float" @bind-Value="NewEntity.Price"/>
                    </Field>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateModalAsync">@L["Cancel"]</Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="CreateEntityAsync">@L["Save"]</Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

                <Modal @ref="@EditModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@EditingEntity.Name</ModalTitle>
                <CloseButton Clicked="CloseEditModalAsync"/>
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@EditValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                    <Field>
                        <FieldLabel>@L["Teacher"]</FieldLabel>
                        <Select TValue="Guid" @bind-SelectedValue="@EditingEntity.TeacherId">
                            @foreach (var teacher in teacherList)
                            {
                                <SelectItem TValue="Guid" Value="@teacher.Id">
                                    @teacher.Name
                                </SelectItem>
                            }
                        </Select>
                    </Field>
                    <Validation MessageLocalizer="@LH.Localize">
                        <Field>
                            <FieldLabel>@L["Name"]</FieldLabel>
                            <TextEdit @bind-Text="@EditingEntity.Name">
                                <Feedback>
                                    <ValidationError/>
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Field>
                        <FieldLabel>@L["Type"]</FieldLabel>
                        <Select TValue="CourseType" @bind-SelectedValue="@EditingEntity.Type">
                            @foreach (int courseTypeValue in Enum.GetValues(typeof(CourseType)))
                            {
                                <SelectItem TValue="CourseType" Value="@((CourseType) courseTypeValue)">
                                    @L[$"Enum:CourseType.{courseTypeValue}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>
                    <Field>
                        <FieldLabel>@L["PublishDate"]</FieldLabel>
                        <DateEdit TValue="DateTime" @bind-Date="EditingEntity.PublishDate"/>
                    </Field>
                    <Field>
                        <FieldLabel>@L["Price"]</FieldLabel>
                        <NumericEdit TValue="float" @bind-Value="EditingEntity.Price"/>
                    </Field>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditModalAsync">@L["Cancel"]</Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="UpdateEntityAsync">@L["Save"]</Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

@code{
    IReadOnlyList<TeacherLookupDto> teacherList = Array.Empty<TeacherLookupDto>();
   
    public Courses() // Constructor
    {
        CreatePolicyName = HighSchoolPermissions.Courses.Create;
        UpdatePolicyName = HighSchoolPermissions.Courses.Edit;
        DeletePolicyName = HighSchoolPermissions.Courses.Delete;
    }
    //GET AUTHORS ON INITIALIZATION
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        teacherList = (await AppService.GetTeacherLookupAsync()).Items;
    }
    protected override async Task OpenCreateModalAsync()
    {
        if (!teacherList.Any())
        {
            throw new UserFriendlyException(message: L["AnTeacherIsRequiredForCreatingCourse"]);
        }

        await base.OpenCreateModalAsync();
        NewEntity.TeacherId = teacherList.First().Id;
    }
}